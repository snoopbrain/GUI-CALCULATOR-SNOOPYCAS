Microsoft (R) Macro Assembler Version 14.33.31630.0	    11/25/22 13:32:32
SNOOPY CAS.asm						     Page 1 - 1


				.386
				.model flat,stdcall
				.stack 4096
				ExitProcess proto,dwExitCode:dword



				INCLUDE irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .MODEL flat, stdcall
c:\Irvine\SmallWin.inc(11) : warning A4011:multiple .MODEL directives found : .MODEL ignored
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDELIB	user32.lib



				GCD PROTO  x:SDWORD, y:SDWORD
				abs PROTO, x:PTR SDWORD



				; Macros:
				mGotoxy MACRO X:REQ, Y:REQ								; Reposition cursor to x,y position
					PUSH	EDX
					MOV	DH, Y
					MOV	DL, X
					CALL	Gotoxy
					POP	EDX
				ENDM


				mWrite MACRO text:REQ									; Write string literals.
					LOCAL string
					.data
						string BYTE text, 0
					.code
						PUSH	EDX
						MOV	EDX, OFFSET string
						CALL	WriteString
						POP	EDX
				ENDM


				mWriteString MACRO buffer:REQ								; Write string variables
					PUSH	EDX
					MOV	EDX, OFFSET buffer
					CALL	WriteString
					POP	EDX
				ENDM


				mReadString MACRO var:REQ								; Read string from console
					PUSH	ECX
					PUSH	EDX
					MOV	EDX, OFFSET var
					MOV	ECX, SIZEOF var
					CALL	ReadString
					POP	EDX
					POP	ECX
				ENDM

				; Structs:
 00000002			AXIS STRUCT										; estructura de cordenadas para generar nuestros botones
 00000000  00			    x BYTE 0
 00000001  00			    y BYTE 0
				AXIS ENDS


				; KeyCodes:
 = 00000008				VK_BACKSPACE   EQU	000000008h
 = 00000025				VK_LEFT		EQU	000000025h
 = 00000026				VK_UP		EQU	000000026h
 = 00000027				VK_RIGHT	EQU	000000027h
 = 00000028				VK_DOWN		EQU	000000028h
 = 0000004C				maxCol      EQU     76
 = 00000014				maxRow      EQU     20
 = 0000000D				VK_Carriage	EQU	00000000Dh
					


				; Game "Window" Setup:
 = 0000004F				maxX		EQU       79							; Se adapta al tamaño estándar de la consola
 = 00000017				maxY		EQU       23
 = "-----------------------		wallHor       	EQU       "--------------------------------------------------------------------------------"
   ------------------------
   ------------------------
   ---------"
 = 0000007C				wallVert      	EQU       '|'
 = 000000FF				maxSize		EQU       255



				; Prototypes:
				GetKeyState PROTO, nVirtKey:DWORD
 00000000			.data


 00000000 00			choice BYTE    0							;variable para la seleccion del menu
 00000001  0000000E [		playerName BYTE 13 + 1 DUP (?)				;string para nombre de usuario
	    00
	   ]
 0000000F 24 07			    BotonPointSuma	AXIS    <36,7>						; posicion de mi boton suma
 00000011 24 09				BotonPointRes	AXIS    <36,9>						; posicion de mi boton Res
 00000013 24 0B				BotonPointMul	AXIS    <36,11>						; posicion de mi boton Mul
 00000015 24 0D				BotonPointDiv	AXIS    <36,13>						; posicion de mi boton div
 00000017 0A 07				BotonPointsen	AXIS    <10,7>						; posicion de mi boton sen 
 00000019 12 07				BotonPointcos	AXIS    <18,7>						; posicion de mi boton cos
 0000001B 1A 07				BotonPointtan	AXIS    <26,7>						; posicion de mi boton tan
 0000001D 0A 09				BotonPointsec	AXIS    <10,9>						; posicion de mi boton sec
 0000001F 12 09				BotonPointcsc	AXIS    <18,9>						; posicion de mi boton csc
 00000021 1A 09				BotonPointcot	AXIS    <26,9>						; posicion de mi boton cot
 00000023 0A 0B				BotonPoint1	AXIS    <10,11>						; posicion de mi boton 1  
 00000025 12 0B				BotonPoint2 AXIS    <18,11>						; posicion de mi boton 2
 00000027 1A 0B				BotonPoint3	AXIS    <26,11>						; posicion de mi boton 3
 00000029 0A 0D				BotonPoint4	AXIS    <10,13>						; posicion de mi boton 4
 0000002B 12 0D				BotonPoint5	AXIS    <18,13>						; posicion de mi boton 5
 0000002D 1A 0D				BotonPoint6	AXIS    <26,13>						; posicion de mi boton 6
 0000002F 0A 0F				BotonPoint7	AXIS    <10,15>						; posicion de mi boton 7
 00000031 12 0F				BotonPoint8	AXIS    <18,15>						; posicion de mi boton 8
 00000033 1A 0F				BotonPoint9	AXIS    <26,15>						; posicion de mi boton 9
 00000035 12 11				BotonPoint0	AXIS    <18,17>						; posicion de mi boton 0
 00000037 24 14				BotonPointEqual	AXIS    <36,20>						; posicion de mi boton =


 00000039 04			    currentX	BYTE    4							; spawn point x
 0000003A 04			    currentY	BYTE    4							; spawn point y

					
 0000003B 00				times db 0
					
					
 0000003C 00000000			UNO SDWORD ?
 00000040 00000000			DOS SDWORD ?
				   
 00000044 00000000			acumulador dword ?
 00000048 00000000			segundo_val dword ?
 0000004C 00000000			primer_val dword ?
 00000000			.code



 00000000			main PROC
 00000000  E8 00000A19			CALL StartSnoopycas
 00000005  C3				RET
 00000006			main ENDP



 00000006			MovimientoLibre PROC

 00000006			looop:   
 00000006  B4 00		    mov ah, 0
				    INVOKE GetKeyState, VK_DOWN
 00000008  6A 28	   *	    push   +000000028h
 0000000A  E8 00000000 E   *	    call   GetKeyState
					.IF ah && currentY < maxRow
 0000000F  0A E4	   *	    or	ah, ah
 00000011  74 0F	   *	    je	@C0001
 00000013  80 3D 0000003A R
	   14		   *	    cmp    currentY, maxRow
 0000001A  73 06	   *	    jae    @C0001
				        ;mWriteLn "DOWN"
 0000001C  FE 05 0000003A R	        INC currentY
				  	.ENDIF
 00000022		   *@C0001:

					INVOKE GetKeyState, VK_UP
 00000022  6A 26	   *	    push   +000000026h
 00000024  E8 00000000 E   *	    call   GetKeyState
				    .IF ah && currentY > 2
 00000029  0A E4	   *	    or	ah, ah
 0000002B  74 0F	   *	    je	@C0004
 0000002D  80 3D 0000003A R
	   02		   *	    cmp    currentY, 002h
 00000034  76 06	   *	    jbe    @C0004
				        ;mWriteLn "UP"
 00000036  FE 0D 0000003A R	        DEC currentY
					.ENDIF     
 0000003C		   *@C0004:

					INVOKE GetKeyState, VK_LEFT
 0000003C  6A 25	   *	    push   +000000025h
 0000003E  E8 00000000 E   *	    call   GetKeyState
				    .IF ah && currentX > 2
 00000043  0A E4	   *	    or	ah, ah
 00000045  74 0F	   *	    je	@C0007
 00000047  80 3D 00000039 R
	   02		   *	    cmp    currentX, 002h
 0000004E  76 06	   *	    jbe    @C0007
				        ;mWriteLn "LEFT"
 00000050  FE 0D 00000039 R	        DEC currentX
					.ENDIF  
 00000056		   *@C0007:

					INVOKE GetKeyState, VK_RIGHT
 00000056  6A 27	   *	    push   +000000027h
 00000058  E8 00000000 E   *	    call   GetKeyState
				    .IF ah && currentX < maxCol
 0000005D  0A E4	   *	    or	ah, ah
 0000005F  74 0F	   *	    je	@C000A
 00000061  80 3D 00000039 R
	   4C		   *	    cmp    currentX, maxCol
 00000068  73 06	   *	    jae    @C000A
				        ;mWriteLn "RIGHT"
 0000006A  FE 05 00000039 R	        INC currentX
					.ENDIF 
 00000070		   *@C000A:
					


 00000070  8A 15 00000039 R	    mov  dl, currentX        ; column
 00000076  8A 35 0000003A R	    mov  dh, currentY        ; currentY
 0000007C  E8 00000000 E	    call Gotoxy         ; Change position according to new input
				        
 00000081  B0 2A		    mov  al, '*'          
 00000083  E8 00000000 E	    call WriteChar      ; Write point on new place
				 
				    ;mov eax, 0
				    ;mov al, currentX
				    ;call WriteInt
				    ;mov al, '-'
				    ;call WriteChar
				    ;mov al, currentY
				    ;call WriteInt
				    ;call Crlf
 00000088  B0 00			mov al,0
					INVOKE GetKeyState, VK_RSHIFT
 0000008A  68 000000A1	   *	    push   +0000000A1h
 0000008F  E8 00000000 E   *	    call   GetKeyState
 00000094  A8 01				test al,1
						.IF !Zero?
 00000096  74 35	   *	    je	@C000D
						  mgotoxy 6,3
 00000098  52		     1		PUSH	EDX
 00000099  B6 03	     1		MOV	DH, 3
 0000009B  B2 06	     1		MOV	DL, 6
 0000009D  E8 00000000 E     1		CALL	Gotoxy
 000000A2  5A		     1		POP	EDX
						  mwrite "              "
 00000050		     1		.data
 00000050 20 20 20 20 20     1			??0000 BYTE "              ", 0
	   20 20 20 20 20
	   20 20 20 20 00
 000000A3		     1		.code
 000000A3  52		     1			PUSH	EDX
 000000A4  BA 00000050 R     1			MOV	EDX, OFFSET ??0000
 000000A9  E8 00000000 E     1			CALL	WriteString
 000000AE  5A		     1			POP	EDX
						  mgotoxy 43,8
 000000AF  52		     1		PUSH	EDX
 000000B0  B6 08	     1		MOV	DH, 8
 000000B2  B2 2B	     1		MOV	DL, 43
 000000B4  E8 00000000 E     1		CALL	Gotoxy
 000000B9  5A		     1		POP	EDX
						
						mwrite "ShiftR => Borrando salida   "
 0000005F		     1		.data
 0000005F 53 68 69 66 74     1			??0001 BYTE "ShiftR => Borrando salida   ", 0
	   52 20 3D 3E 20
	   42 6F 72 72 61
	   6E 64 6F 20 73
	   61 6C 69 64 61
	   20 20 20 00
 000000BA		     1		.code
 000000BA  52		     1			PUSH	EDX
 000000BB  BA 0000005F R     1			MOV	EDX, OFFSET ??0001
 000000C0  E8 00000000 E     1			CALL	WriteString
 000000C5  5A		     1			POP	EDX
 000000C6  C6 05 0000003B R			mov times,0
	   00

						.ENDIF
 000000CD		   *@C000D:

					INVOKE GetKeyState, VK_Carriage 	;se oprimio enter?
 000000CD  6A 0D	   *	    push   +00000000Dh
 000000CF  E8 00000000 E   *	    call   GetKeyState
 000000D4  A8 01			test al,1
					.IF !Zero?
 000000D6  74 05	   *	    je	@C000F
 000000D8  E8 0000005E			 call boton
					.ENDIF
 000000DD		   *@C000F:
					
				    invoke Sleep, 25
 000000DD  6A 19	   *	    push   +000000019h
 000000DF  E8 00000000 E   *	    call   Sleep
				    
				    
				    ; Erase Point
 000000E4  8A 15 00000039 R	    mov  dl, currentX        ; column
 000000EA  8A 35 0000003A R	    mov  dh, currentY        ; currentY
 000000F0  E8 00000000 E	    call Gotoxy         ; Change position according to new input
				    
 000000F5  B0 20		    mov  al,' '     
 000000F7  E8 00000000 E	    call WriteChar      ; Remove previous data

 000000FC  E8 00000624			call PrintBotones
				    mgotoxy 43,8
 00000101  52		     1		PUSH	EDX
 00000102  B6 08	     1		MOV	DH, 8
 00000104  B2 2B	     1		MOV	DL, 43
 00000106  E8 00000000 E     1		CALL	Gotoxy
 0000010B  5A		     1		POP	EDX
					mwrite "ShiftR => deseas Borrar?       " 
 0000007C		     1		.data
 0000007C 53 68 69 66 74     1			??0002 BYTE "ShiftR => deseas Borrar?       ", 0
	   52 20 3D 3E 20
	   64 65 73 65 61
	   73 20 42 6F 72
	   72 61 72 3F 20
	   20 20 20 20 20
	   20 00
 0000010C		     1		.code
 0000010C  52		     1			PUSH	EDX
 0000010D  BA 0000007C R     1			MOV	EDX, OFFSET ??0002
 00000112  E8 00000000 E     1			CALL	WriteString
 00000117  5A		     1			POP	EDX
					mgotoxy 43,10
 00000118  52		     1		PUSH	EDX
 00000119  B6 0A	     1		MOV	DH, 10
 0000011B  B2 2B	     1		MOV	DL, 43
 0000011D  E8 00000000 E     1		CALL	Gotoxy
 00000122  5A		     1		POP	EDX
					mwrite "Enter => Algun boton?        "
 0000009C		     1		.data
 0000009C 45 6E 74 65 72     1			??0003 BYTE "Enter => Algun boton?        ", 0
	   20 3D 3E 20 41
	   6C 67 75 6E 20
	   62 6F 74 6F 6E
	   3F 20 20 20 20
	   20 20 20 20 00
 00000123		     1		.code
 00000123  52		     1			PUSH	EDX
 00000124  BA 0000009C R     1			MOV	EDX, OFFSET ??0003
 00000129  E8 00000000 E     1			CALL	WriteString
 0000012E  5A		     1			POP	EDX
					
 0000012F  E9 FFFFFED2		    jmp looop

					exit
 00000134  6A 00	   *	    push   +000000000h
 00000136  E8 00000000 E   *	    call   ExitProcess
 0000013B			MovimientoLibre ENDP



 0000013B			boton PROC										; verifica si hemos oprimido un boton
 0000013B  B9 00000004				mov ecx,4
 00000140					X00:
						
						mgotoxy 43,10
 00000140  52		     1		PUSH	EDX
 00000141  B6 0A	     1		MOV	DH, 10
 00000143  B2 2B	     1		MOV	DL, 43
 00000145  E8 00000000 E     1		CALL	Gotoxy
 0000014A  5A		     1		POP	EDX
						
						mwrite "Enter=> Presionando Botones   "
 000000BA		     1		.data
 000000BA 45 6E 74 65 72     1			??0004 BYTE "Enter=> Presionando Botones   ", 0
	   3D 3E 20 50 72
	   65 73 69 6F 6E
	   61 6E 64 6F 20
	   42 6F 74 6F 6E
	   65 73 20 20 20
	   00
 0000014B		     1		.code
 0000014B  52		     1			PUSH	EDX
 0000014C  BA 000000BA R     1			MOV	EDX, OFFSET ??0004
 00000151  E8 00000000 E     1			CALL	WriteString
 00000156  5A		     1			POP	EDX

 00000157  8A 25 00000039 R			MOV     AH, currentX
 0000015D  A0 0000003A R	        MOV     AL, currentY

 00000162  3A 25 00000023 R			CMP     AH, BotonPoint1.x
 00000168  75 4A				JNE     X01
 0000016A  3A 05 00000024 R			CMP     AL, BotonPoint1.y
 00000170  75 42				JNE     X01
 00000172  80 3D 0000003B R			cmp times,0
	   00
 00000179  B8 00000001				mov eax,1
 0000017E  75 1A				jne segundo
 00000180  A3 0000004C R			mov primer_val,eax
						mGotoxy 6, 3
 00000185  52		     1		PUSH	EDX
 00000186  B6 03	     1		MOV	DH, 3
 00000188  B2 06	     1		MOV	DL, 6
 0000018A  E8 00000000 E     1		CALL	Gotoxy
 0000018F  5A		     1		POP	EDX
 00000190  E8 00000000 E			call writeint
 00000195  E9 00000225				jmp X10

 0000019A				segundo:
						
 0000019A  A3 00000048 R			mov segundo_val,eax
						mGotoxy 9, 3
 0000019F  52		     1		PUSH	EDX
 000001A0  B6 03	     1		MOV	DH, 3
 000001A2  B2 09	     1		MOV	DL, 9
 000001A4  E8 00000000 E     1		CALL	Gotoxy
 000001A9  5A		     1		POP	EDX
 000001AA  E8 00000000 E			call writeint
 000001AF  E9 0000020B				jmp X10
						

 000001B4				X01:	
						
 000001B4  3A 25 00000025 R			CMP     AH, BotonPoint2.x
 000001BA  75 30				JNE     X02
 000001BC  3A 05 00000026 R			CMP     AL, BotonPoint2.y
 000001C2  75 28				JNE     X02
 000001C4  80 3D 0000003B R			cmp times,0
	   00
 000001CB  B8 00000002				mov eax,2
 000001D0  75 C8				jne segundo
 000001D2  A3 0000004C R			mov primer_val,eax
						mGotoxy 6, 3
 000001D7  52		     1		PUSH	EDX
 000001D8  B6 03	     1		MOV	DH, 3
 000001DA  B2 06	     1		MOV	DL, 6
 000001DC  E8 00000000 E     1		CALL	Gotoxy
 000001E1  5A		     1		POP	EDX
 000001E2  E8 00000000 E			call writeint
 000001E7  E9 000001D3				jmp X10

 000001EC				X02:
 000001EC  3A 25 00000027 R			CMP     AH, BotonPoint3.x
 000001F2  75 30				JNE     X03
 000001F4  3A 05 00000028 R			CMP     AL, BotonPoint3.y
 000001FA  75 28				JNE     X03
 000001FC  80 3D 0000003B R			cmp times,0
	   00
 00000203  B8 00000003				mov eax,3
 00000208  75 90				jne segundo
 0000020A  A3 0000004C R			mov primer_val,eax
						mGotoxy 6, 3
 0000020F  52		     1		PUSH	EDX
 00000210  B6 03	     1		MOV	DH, 3
 00000212  B2 06	     1		MOV	DL, 6
 00000214  E8 00000000 E     1		CALL	Gotoxy
 00000219  5A		     1		POP	EDX
 0000021A  E8 00000000 E			call writeint
 0000021F  E9 0000019B				jmp X10
 00000224				X03:
 00000224  3A 25 00000029 R			CMP     AH, BotonPoint4.x
 0000022A  75 34				JNE     X04
 0000022C  3A 05 0000002A R			CMP     AL, BotonPoint4.y
 00000232  75 2C				JNE     X04
 00000234  80 3D 0000003B R			cmp times,0
	   00
 0000023B  B8 00000004				mov eax,4
 00000240  0F 85 FFFFFF54			jne segundo
 00000246  A3 0000004C R			mov primer_val,eax
						mGotoxy 6, 3
 0000024B  52		     1		PUSH	EDX
 0000024C  B6 03	     1		MOV	DH, 3
 0000024E  B2 06	     1		MOV	DL, 6
 00000250  E8 00000000 E     1		CALL	Gotoxy
 00000255  5A		     1		POP	EDX
 00000256  E8 00000000 E			call writeint
 0000025B  E9 0000015F				jmp X10
 00000260				X04:
 00000260  3A 25 0000002B R			CMP     AH, BotonPoint5.x
 00000266  75 34				JNE     X05
 00000268  3A 05 0000002C R			CMP     AL, BotonPoint5.y
 0000026E  75 2C				JNE     X05
 00000270  80 3D 0000003B R			cmp times,0
	   00
 00000277  B8 00000005				mov eax,5
 0000027C  0F 85 FFFFFF18			jne segundo
 00000282  A3 0000004C R			mov primer_val,eax
						mGotoxy 6, 3
 00000287  52		     1		PUSH	EDX
 00000288  B6 03	     1		MOV	DH, 3
 0000028A  B2 06	     1		MOV	DL, 6
 0000028C  E8 00000000 E     1		CALL	Gotoxy
 00000291  5A		     1		POP	EDX
 00000292  E8 00000000 E			call writeint
 00000297  E9 00000123				jmp X10
 0000029C				X05:

 0000029C  3A 25 0000002D R			CMP     AH, BotonPoint6.x
 000002A2  75 34				JNE     X06
 000002A4  3A 05 0000002E R			CMP     AL, BotonPoint6.y
 000002AA  75 2C				JNE     X06
 000002AC  80 3D 0000003B R			cmp times,0
	   00
 000002B3  B8 00000006				mov eax,6
 000002B8  0F 85 FFFFFEDC			jne segundo
 000002BE  A3 0000004C R			mov primer_val,eax
						mGotoxy 6, 3
 000002C3  52		     1		PUSH	EDX
 000002C4  B6 03	     1		MOV	DH, 3
 000002C6  B2 06	     1		MOV	DL, 6
 000002C8  E8 00000000 E     1		CALL	Gotoxy
 000002CD  5A		     1		POP	EDX
 000002CE  E8 00000000 E			call writeint
 000002D3  E9 000000E7				jmp X10
 000002D8				X06:
 000002D8  3A 25 0000002F R			CMP     AH, BotonPoint7.x
 000002DE  75 34				JNE     X07
 000002E0  3A 05 00000030 R			CMP     AL, BotonPoint7.y
 000002E6  75 2C				JNE     X07
 000002E8  80 3D 0000003B R			cmp times,0
	   00
 000002EF  B8 00000007				mov eax,7
 000002F4  0F 85 FFFFFEA0			jne segundo
 000002FA  A3 0000004C R			mov primer_val,eax
						mGotoxy 6, 3
 000002FF  52		     1		PUSH	EDX
 00000300  B6 03	     1		MOV	DH, 3
 00000302  B2 06	     1		MOV	DL, 6
 00000304  E8 00000000 E     1		CALL	Gotoxy
 00000309  5A		     1		POP	EDX
 0000030A  E8 00000000 E			call writeint
 0000030F  E9 000000AB				jmp X10
 00000314				X07:
 00000314  3A 25 00000031 R			CMP     AH, BotonPoint8.x
 0000031A  75 31				JNE     X08
 0000031C  3A 05 00000032 R			CMP     AL, BotonPoint8.y
 00000322  75 29				JNE     X08
 00000324  80 3D 0000003B R			cmp times,0
	   00
 0000032B  B8 00000008				mov eax,8
 00000330  0F 85 FFFFFE64			jne segundo
 00000336  A3 0000004C R			mov primer_val,eax
						mGotoxy 6, 3
 0000033B  52		     1		PUSH	EDX
 0000033C  B6 03	     1		MOV	DH, 3
 0000033E  B2 06	     1		MOV	DL, 6
 00000340  E8 00000000 E     1		CALL	Gotoxy
 00000345  5A		     1		POP	EDX
 00000346  E8 00000000 E			call writeint
 0000034B  EB 72				jmp X10
 0000034D				X08:
 0000034D  3A 25 00000033 R			CMP     AH, BotonPoint9.x
 00000353  75 31				JNE     X09
 00000355  3A 05 00000034 R			CMP     AL, BotonPoint9.y
 0000035B  75 29				JNE     X09
 0000035D  80 3D 0000003B R			cmp times,0
	   00
 00000364  B8 00000009				mov eax,9
 00000369  0F 85 FFFFFE2B			jne segundo
 0000036F  A3 0000004C R			mov primer_val,eax
						mGotoxy 6, 3
 00000374  52		     1		PUSH	EDX
 00000375  B6 03	     1		MOV	DH, 3
 00000377  B2 06	     1		MOV	DL, 6
 00000379  E8 00000000 E     1		CALL	Gotoxy
 0000037E  5A		     1		POP	EDX
 0000037F  E8 00000000 E			call writeint
 00000384  EB 39				jmp X10
 00000386				X09:
 00000386  3A 25 00000035 R			CMP     AH, BotonPoint0.x
 0000038C  75 31				JNE     X10
 0000038E  3A 05 00000036 R			CMP     AL, BotonPoint0.y
 00000394  75 29				JNE     X10
 00000396  80 3D 0000003B R			cmp times,0
	   00
 0000039D  B8 00000000				mov eax,0
 000003A2  0F 85 FFFFFDF2			jne segundo
 000003A8  A3 0000004C R			mov primer_val,eax
						mGotoxy 6, 3
 000003AD  52		     1		PUSH	EDX
 000003AE  B6 03	     1		MOV	DH, 3
 000003B0  B2 06	     1		MOV	DL, 6
 000003B2  E8 00000000 E     1		CALL	Gotoxy
 000003B7  5A		     1		POP	EDX
 000003B8  E8 00000000 E			call writeint
 000003BD  EB 00				jmp X10
						
 000003BF				X10:
						
 000003BF  3A 25 0000000F R	        CMP     AH, BotonPointSuma.x							; es mi X igual a la posicion x de mi boton
 000003C5  75 3E		        JNE     X11									; Si no es asi entonces Exit proc
 000003C7  3A 05 00000010 R	        CMP     AL, BotonPointSuma.y							; es mi Y igual a la posicion y de mi boton
 000003CD  75 36		        JNE     X11
						mgotoxy 8,3
 000003CF  52		     1		PUSH	EDX
 000003D0  B6 03	     1		MOV	DH, 3
 000003D2  B2 08	     1		MOV	DL, 8
 000003D4  E8 00000000 E     1		CALL	Gotoxy
 000003D9  5A		     1		POP	EDX
						mwrite "+"
 000000D9		     1		.data
 000000D9 2B 00		     1			??0005 BYTE "+", 0
 000003DA		     1		.code
 000003DA  52		     1			PUSH	EDX
 000003DB  BA 000000D9 R     1			MOV	EDX, OFFSET ??0005
 000003E0  E8 00000000 E     1			CALL	WriteString
 000003E5  5A		     1			POP	EDX
 000003E6  FE 05 0000003B R			inc times
 000003EC  80 3D 0000003B R			cmp times,1
	   01
 000003F3  74 4C				je X13
 000003F5  A1 00000048 R			mov eax,segundo_val
 000003FA  03 05 0000004C R			add eax,primer_val
 00000400  A3 00000044 R			mov acumulador,eax


 00000405				X11:
 00000405  3A 25 00000037 R			CMP     AH,BotonPointEqual.x								; es mi X igual a la posicion x de mi boton
 0000040B  75 34		        JNE     X13									; Si no es asi entonces Exit proc
 0000040D  3A 05 00000038 R	        CMP     AL,BotonPointEqual.y							; es mi Y igual a la posicion y de mi boton
 00000413  75 2C		        JNE     X13
 00000415  A1 00000044 R			mov eax,acumulador
						mgotoxy 11,3
 0000041A  52		     1		PUSH	EDX
 0000041B  B6 03	     1		MOV	DH, 3
 0000041D  B2 0B	     1		MOV	DL, 11
 0000041F  E8 00000000 E     1		CALL	Gotoxy
 00000424  5A		     1		POP	EDX
						mwrite "="
 000000DB		     1		.data
 000000DB 3D 00		     1			??0006 BYTE "=", 0
 00000425		     1		.code
 00000425  52		     1			PUSH	EDX
 00000426  BA 000000DB R     1			MOV	EDX, OFFSET ??0006
 0000042B  E8 00000000 E     1			CALL	WriteString
 00000430  5A		     1			POP	EDX
						mgotoxy 13,3
 00000431  52		     1		PUSH	EDX
 00000432  B6 03	     1		MOV	DH, 3
 00000434  B2 0D	     1		MOV	DL, 13
 00000436  E8 00000000 E     1		CALL	Gotoxy
 0000043B  5A		     1		POP	EDX
 0000043C  E8 00000000 E			call writeint
						
				   
 00000441				X13:
 00000441  C3			        RET
						
 00000442			boton ENDP



 00000442			PrintParedes PROC										; Dibuja las paredes
 00000442  B8 0000001F			mov eax,31										;color fondo azul texto blanco
 00000447  E8 00000000 E		call	SetTextColor
					mGotoxy 0, 1     
 0000044C  52		     1		PUSH	EDX
 0000044D  B6 01	     1		MOV	DH, 1
 0000044F  B2 00	     1		MOV	DL, 0
 00000451  E8 00000000 E     1		CALL	Gotoxy
 00000456  5A		     1		POP	EDX
					mWrite	wallHor
 000000DD		     1		.data
 000000DD 2D 2D 2D 2D 2D     1			??0007 BYTE wallHor, 0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00
 00000457		     1		.code
 00000457  52		     1			PUSH	EDX
 00000458  BA 000000DD R     1			MOV	EDX, OFFSET ??0007
 0000045D  E8 00000000 E     1			CALL	WriteString
 00000462  5A		     1			POP	EDX
					mGotoxy 0, maxY									; Dibuja las paredes de arriba y abajo
 00000463  52		     1		PUSH	EDX
 00000464  B6 17	     1		MOV	DH, maxY
 00000466  B2 00	     1		MOV	DL, 0
 00000468  E8 00000000 E     1		CALL	Gotoxy
 0000046D  5A		     1		POP	EDX
					mWrite	wallHor    
 0000012E		     1		.data
 0000012E 2D 2D 2D 2D 2D     1			??0008 BYTE wallHor, 0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00
 0000046E		     1		.code
 0000046E  52		     1			PUSH	EDX
 0000046F  BA 0000012E R     1			MOV	EDX, OFFSET ??0008
 00000474  E8 00000000 E     1			CALL	WriteString
 00000479  5A		     1			POP	EDX
 0000047A  B1 16			MOV	CL, maxY - 1								; Prepara CL para colocación en la pared vertical
					
 0000047C			    X00:
 0000047C  80 F9 01			CMP	CL, 1									; WHILE CL != 0
 0000047F  74 32			JE	X01									; SI lo hace, salga del ciclo WHILE
				        mGotoxy 0, CL									; Escribir caracter de pared izquierda  " | "
 00000481  52		     1		PUSH	EDX
 00000482  8A F1	     1		MOV	DH, CL
 00000484  B2 00	     1		MOV	DL, 0
 00000486  E8 00000000 E     1		CALL	Gotoxy
 0000048B  5A		     1		POP	EDX
				        mWrite	wallVert								
 0000017F		     1		.data
 0000017F 7C 00		     1			??0009 BYTE wallVert, 0
 0000048C		     1		.code
 0000048C  52		     1			PUSH	EDX
 0000048D  BA 0000017F R     1			MOV	EDX, OFFSET ??0009
 00000492  E8 00000000 E     1			CALL	WriteString
 00000497  5A		     1			POP	EDX
				        mGotoxy maxX, CL
 00000498  52		     1		PUSH	EDX
 00000499  8A F1	     1		MOV	DH, CL
 0000049B  B2 4F	     1		MOV	DL, maxX
 0000049D  E8 00000000 E     1		CALL	Gotoxy
 000004A2  5A		     1		POP	EDX
				        mWrite	wallVert								; Escribir caracter de pared derecha  " | "
 00000181		     1		.data
 00000181 7C 00		     1			??000A BYTE wallVert, 0
 000004A3		     1		.code
 000004A3  52		     1			PUSH	EDX
 000004A4  BA 00000181 R     1			MOV	EDX, OFFSET ??000A
 000004A9  E8 00000000 E     1			CALL	WriteString
 000004AE  5A		     1			POP	EDX
 000004AF  FE C9		        DEC	CL									; viajar hacia arriba en la pantalla hasta que todos estén colocados
 000004B1  EB C9			JMP	X00									; Saltar al principio del bucle WHILE
				    
 000004B3			    X01:
 000004B3  C3				RET
 000004B4			PrintParedes ENDP





 000004B4			DrawTitleScreen PROC									; escribe el titulo, diseño pobre xd
 000004B4  E8 00000000 E		CALL	ClrScr
 000004B9  E8 FFFFFF84			CALL	PrintParedes
						
 000004BE  B8 0000009F			mov eax,159
 000004C3  E8 00000000 E		call	SetTextColor
					
					mGotoxy 5, 4									; Dibuja titulo en  ASCII
 000004C8  52		     1		PUSH	EDX
 000004C9  B6 04	     1		MOV	DH, 4
 000004CB  B2 05	     1		MOV	DL, 5
 000004CD  E8 00000000 E     1		CALL	Gotoxy
 000004D2  5A		     1		POP	EDX
					mWrite	" ___   _ _    ______   ______   _____  __   __    _____          ___ "	
 00000183		     1		.data
 00000183 20 5F 5F 5F 20     1			??000B BYTE " ___   _ _    ______   ______   _____  __   __    _____          ___ ", 0
	   20 20 5F 20 5F
	   20 20 20 20 5F
	   5F 5F 5F 5F 5F
	   20 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 5F 5F 5F
	   5F 5F 20 20 5F
	   5F 20 20 20 5F
	   5F 20 20 20 20
	   5F 5F 5F 5F 5F
	   20 20 20 20 20
	   20 20 20 20 20
	   5F 5F 5F 20 00
 000004D3		     1		.code
 000004D3  52		     1			PUSH	EDX
 000004D4  BA 00000183 R     1			MOV	EDX, OFFSET ??000B
 000004D9  E8 00000000 E     1			CALL	WriteString
 000004DE  5A		     1			POP	EDX
					mGotoxy 5, 5
 000004DF  52		     1		PUSH	EDX
 000004E0  B6 05	     1		MOV	DH, 5
 000004E2  B2 05	     1		MOV	DL, 5
 000004E4  E8 00000000 E     1		CALL	Gotoxy
 000004E9  5A		     1		POP	EDX
					mWrite	"/ __| | ' \  |  __  | |  __  | |  _  | \ \/  /   |  ___|  __ _  / __|"
 000001C9		     1		.data
 000001C9 2F 20 5F 5F 7C     1			??000C BYTE "/ __| | ' \  |  __  | |  __  | |  _  | \ \/  /   |  ___|  __ _  / __|", 0
	   20 7C 20 27 20
	   5C 20 20 7C 20
	   20 5F 5F 20 20
	   7C 20 7C 20 20
	   5F 5F 20 20 7C
	   20 7C 20 20 5F
	   20 20 7C 20 5C
	   20 5C 2F 20 20
	   2F 20 20 20 7C
	   20 20 5F 5F 5F
	   7C 20 20 5F 5F
	   20 5F 20 20 2F
	   20 5F 5F 7C 00
 000004EA		     1		.code
 000004EA  52		     1			PUSH	EDX
 000004EB  BA 000001C9 R     1			MOV	EDX, OFFSET ??000C
 000004F0  E8 00000000 E     1			CALL	WriteString
 000004F5  5A		     1			POP	EDX
					mGotoxy 5, 6
 000004F6  52		     1		PUSH	EDX
 000004F7  B6 06	     1		MOV	DH, 6
 000004F9  B2 05	     1		MOV	DL, 5
 000004FB  E8 00000000 E     1		CALL	Gotoxy
 00000500  5A		     1		POP	EDX
					mWrite	"\__ \ | || | | |__| | | |__| | |   __/  \   /    | |___  / _` | \__ \"
 0000020F		     1		.data
 0000020F 5C 5F 5F 20 5C     1			??000D BYTE "\__ \ | || | | |__| | | |__| | |   __/  \   /    | |___  / _` | \__ \", 0
	   20 7C 20 7C 7C
	   20 7C 20 7C 20
	   7C 5F 5F 7C 20
	   7C 20 7C 20 7C
	   5F 5F 7C 20 7C
	   20 7C 20 20 20
	   5F 5F 2F 20 20
	   5C 20 20 20 2F
	   20 20 20 20 7C
	   20 7C 5F 5F 5F
	   20 20 2F 20 5F
	   60 20 7C 20 5C
	   5F 5F 20 5C 00
 00000501		     1		.code
 00000501  52		     1			PUSH	EDX
 00000502  BA 0000020F R     1			MOV	EDX, OFFSET ??000D
 00000507  E8 00000000 E     1			CALL	WriteString
 0000050C  5A		     1			POP	EDX
					mGotoxy 5, 7
 0000050D  52		     1		PUSH	EDX
 0000050E  B6 07	     1		MOV	DH, 7
 00000510  B2 05	     1		MOV	DL, 5
 00000512  E8 00000000 E     1		CALL	Gotoxy
 00000517  5A		     1		POP	EDX
					mWrite	"|___/ |_||_| |______| |______| |__|      \__\    |_____| \__,_| |___/"
 00000255		     1		.data
 00000255 7C 5F 5F 5F 2F     1			??000E BYTE "|___/ |_||_| |______| |______| |__|      \__\    |_____| \__,_| |___/", 0
	   20 7C 5F 7C 7C
	   5F 7C 20 7C 5F
	   5F 5F 5F 5F 5F
	   7C 20 7C 5F 5F
	   5F 5F 5F 5F 7C
	   20 7C 5F 5F 7C
	   20 20 20 20 20
	   20 5C 5F 5F 5C
	   20 20 20 20 7C
	   5F 5F 5F 5F 5F
	   7C 20 5C 5F 5F
	   2C 5F 7C 20 7C
	   5F 5F 5F 2F 00
 00000518		     1		.code
 00000518  52		     1			PUSH	EDX
 00000519  BA 00000255 R     1			MOV	EDX, OFFSET ??000E
 0000051E  E8 00000000 E     1			CALL	WriteString
 00000523  5A		     1			POP	EDX

					mGotoxy 32, 9									; Dibuja V.1
 00000524  52		     1		PUSH	EDX
 00000525  B6 09	     1		MOV	DH, 9
 00000527  B2 20	     1		MOV	DL, 32
 00000529  E8 00000000 E     1		CALL	Gotoxy
 0000052E  5A		     1		POP	EDX
					mWrite	" __   __      _  "	
 0000029B		     1		.data
 0000029B 20 5F 5F 20 20     1			??000F BYTE " __   __      _  ", 0
	   20 5F 5F 20 20
	   20 20 20 20 5F
	   20 20 00
 0000052F		     1		.code
 0000052F  52		     1			PUSH	EDX
 00000530  BA 0000029B R     1			MOV	EDX, OFFSET ??000F
 00000535  E8 00000000 E     1			CALL	WriteString
 0000053A  5A		     1			POP	EDX
					mGotoxy 32, 10
 0000053B  52		     1		PUSH	EDX
 0000053C  B6 0A	     1		MOV	DH, 10
 0000053E  B2 20	     1		MOV	DL, 32
 00000540  E8 00000000 E     1		CALL	Gotoxy
 00000545  5A		     1		POP	EDX
					mWrite	" \ \ / /     / | "
 000002AD		     1		.data
 000002AD 20 5C 20 5C 20     1			??0010 BYTE " \ \ / /     / | ", 0
	   2F 20 2F 20 20
	   20 20 20 2F 20
	   7C 20 00
 00000546		     1		.code
 00000546  52		     1			PUSH	EDX
 00000547  BA 000002AD R     1			MOV	EDX, OFFSET ??0010
 0000054C  E8 00000000 E     1			CALL	WriteString
 00000551  5A		     1			POP	EDX
					mGotoxy 32, 11
 00000552  52		     1		PUSH	EDX
 00000553  B6 0B	     1		MOV	DH, 11
 00000555  B2 20	     1		MOV	DL, 32
 00000557  E8 00000000 E     1		CALL	Gotoxy
 0000055C  5A		     1		POP	EDX
					mWrite	"  \ V /   _  | | "
 000002BF		     1		.data
 000002BF 20 20 5C 20 56     1			??0011 BYTE "  \ V /   _  | | ", 0
	   20 2F 20 20 20
	   5F 20 20 7C 20
	   7C 20 00
 0000055D		     1		.code
 0000055D  52		     1			PUSH	EDX
 0000055E  BA 000002BF R     1			MOV	EDX, OFFSET ??0011
 00000563  E8 00000000 E     1			CALL	WriteString
 00000568  5A		     1			POP	EDX
					mGotoxy 32, 12
 00000569  52		     1		PUSH	EDX
 0000056A  B6 0C	     1		MOV	DH, 12
 0000056C  B2 20	     1		MOV	DL, 32
 0000056E  E8 00000000 E     1		CALL	Gotoxy
 00000573  5A		     1		POP	EDX
					mWrite	"   \_/   (_) |_| "
 000002D1		     1		.data
 000002D1 20 20 20 5C 5F     1			??0012 BYTE "   \_/   (_) |_| ", 0
	   2F 20 20 20 28
	   5F 29 20 7C 5F
	   7C 20 00
 00000574		     1		.code
 00000574  52		     1			PUSH	EDX
 00000575  BA 000002D1 R     1			MOV	EDX, OFFSET ??0012
 0000057A  E8 00000000 E     1			CALL	WriteString
 0000057F  5A		     1			POP	EDX
					
 00000580  B8 000000C0			mov eax,192
 00000585  E8 00000000 E		call	SetTextColor
					

					mGotoxy 23, 14									; Una bella introduccion
 0000058A  52		     1		PUSH	EDX
 0000058B  B6 0E	     1		MOV	DH, 14
 0000058D  B2 17	     1		MOV	DL, 23
 0000058F  E8 00000000 E     1		CALL	Gotoxy
 00000594  5A		     1		POP	EDX
					mWrite	"Andres Yair Carvajal Bolivar 2022"
 000002E3		     1		.data
 000002E3 41 6E 64 72 65     1			??0013 BYTE "Andres Yair Carvajal Bolivar 2022", 0
	   73 20 59 61 69
	   72 20 43 61 72
	   76 61 6A 61 6C
	   20 42 6F 6C 69
	   76 61 72 20 32
	   30 32 32 00
 00000595		     1		.code
 00000595  52		     1			PUSH	EDX
 00000596  BA 000002E3 R     1			MOV	EDX, OFFSET ??0013
 0000059B  E8 00000000 E     1			CALL	WriteString
 000005A0  5A		     1			POP	EDX
					mGotoxy 32, 16
 000005A1  52		     1		PUSH	EDX
 000005A2  B6 10	     1		MOV	DH, 16
 000005A4  B2 20	     1		MOV	DL, 32
 000005A6  E8 00000000 E     1		CALL	Gotoxy
 000005AB  5A		     1		POP	EDX
					mWrite	"Assembly(x86)"
 00000305		     1		.data
 00000305 41 73 73 65 6D     1			??0014 BYTE "Assembly(x86)", 0
	   62 6C 79 28 78
	   38 36 29 00
 000005AC		     1		.code
 000005AC  52		     1			PUSH	EDX
 000005AD  BA 00000305 R     1			MOV	EDX, OFFSET ??0014
 000005B2  E8 00000000 E     1			CALL	WriteString
 000005B7  5A		     1			POP	EDX
					mGotoxy 23, 18
 000005B8  52		     1		PUSH	EDX
 000005B9  B6 12	     1		MOV	DH, 18
 000005BB  B2 17	     1		MOV	DL, 23
 000005BD  E8 00000000 E     1		CALL	Gotoxy
 000005C2  5A		     1		POP	EDX
					mWrite	"UNIVERSIDAD NACIONAL DE COLOMBIA"
 00000313		     1		.data
 00000313 55 4E 49 56 45     1			??0015 BYTE "UNIVERSIDAD NACIONAL DE COLOMBIA", 0
	   52 53 49 44 41
	   44 20 4E 41 43
	   49 4F 4E 41 4C
	   20 44 45 20 43
	   4F 4C 4F 4D 42
	   49 41 00
 000005C3		     1		.code
 000005C3  52		     1			PUSH	EDX
 000005C4  BA 00000313 R     1			MOV	EDX, OFFSET ??0015
 000005C9  E8 00000000 E     1			CALL	WriteString
 000005CE  5A		     1			POP	EDX
 000005CF  B8 0000000F			mov eax,15
 000005D4  E8 00000000 E		call	SetTextColor
					mGotoxy 25,20
 000005D9  52		     1		PUSH	EDX
 000005DA  B6 14	     1		MOV	DH, 20
 000005DC  B2 19	     1		MOV	DL, 25
 000005DE  E8 00000000 E     1		CALL	Gotoxy
 000005E3  5A		     1		POP	EDX
 000005E4  E8 00000000 E		CALL	WaitMsg
					mGotoxy 0, 0 
 000005E9  52		     1		PUSH	EDX
 000005EA  B6 00	     1		MOV	DH, 0
 000005EC  B2 00	     1		MOV	DL, 0
 000005EE  E8 00000000 E     1		CALL	Gotoxy
 000005F3  5A		     1		POP	EDX
 000005F4  C3				RET
 000005F5			DrawTitleScreen ENDP

 000005F5			FIGGONACCI PROC
 000005F5  8B C0			MOV EAX,EAX

 000005F7			FIGGONACCI	ENDP

 000005F7			DrawMainMenu PROC									; Elige tipo de calculadora

 000005F7  E8 00000000 E		CALL	ClrScr
 000005FC  E8 FFFFFE41			CALL	PrintParedes
 00000601  B8 0000009F			mov eax,159
 00000606  E8 00000000 E		call	SetTextColor

					mGotoxy 30, 5									; Visualización del menú principal y solicitud de nombre
 0000060B  52		     1		PUSH	EDX
 0000060C  B6 05	     1		MOV	DH, 5
 0000060E  B2 1E	     1		MOV	DL, 30
 00000610  E8 00000000 E     1		CALL	Gotoxy
 00000615  5A		     1		POP	EDX
					mWrite	"--MAIN MENU--"
 00000334		     1		.data
 00000334 2D 2D 4D 41 49     1			??0016 BYTE "--MAIN MENU--", 0
	   4E 20 4D 45 4E
	   55 2D 2D 00
 00000616		     1		.code
 00000616  52		     1			PUSH	EDX
 00000617  BA 00000334 R     1			MOV	EDX, OFFSET ??0016
 0000061C  E8 00000000 E     1			CALL	WriteString
 00000621  5A		     1			POP	EDX
					mGotoxy 30, 7
 00000622  52		     1		PUSH	EDX
 00000623  B6 07	     1		MOV	DH, 7
 00000625  B2 1E	     1		MOV	DL, 30
 00000627  E8 00000000 E     1		CALL	Gotoxy
 0000062C  5A		     1		POP	EDX
					mWrite	"Ingresa Nombre: "
 00000342		     1		.data
 00000342 49 6E 67 72 65     1			??0017 BYTE "Ingresa Nombre: ", 0
	   73 61 20 4E 6F
	   6D 62 72 65 3A
	   20 00
 0000062D		     1		.code
 0000062D  52		     1			PUSH	EDX
 0000062E  BA 00000342 R     1			MOV	EDX, OFFSET ??0017
 00000633  E8 00000000 E     1			CALL	WriteString
 00000638  5A		     1			POP	EDX
					mReadString playerName								; pide nombre del usuario
 00000639  51		     1		PUSH	ECX
 0000063A  52		     1		PUSH	EDX
 0000063B  BA 00000001 R     1		MOV	EDX, OFFSET playerName
 00000640  B9 0000000E	     1		MOV	ECX, SIZEOF playerName
 00000645  E8 00000000 E     1		CALL	ReadString
 0000064A  5A		     1		POP	EDX
 0000064B  59		     1		POP	ECX
					mGotoxy 30, 10
 0000064C  52		     1		PUSH	EDX
 0000064D  B6 0A	     1		MOV	DH, 10
 0000064F  B2 1E	     1		MOV	DL, 30
 00000651  E8 00000000 E     1		CALL	Gotoxy
 00000656  5A		     1		POP	EDX
					mWrite	"--Elige Opcion--"							; Escribe las opciones
 00000353		     1		.data
 00000353 2D 2D 45 6C 69     1			??0018 BYTE "--Elige Opcion--", 0
	   67 65 20 4F 70
	   63 69 6F 6E 2D
	   2D 00
 00000657		     1		.code
 00000657  52		     1			PUSH	EDX
 00000658  BA 00000353 R     1			MOV	EDX, OFFSET ??0018
 0000065D  E8 00000000 E     1			CALL	WriteString
 00000662  5A		     1			POP	EDX
					mGotoxy 30, 12  
 00000663  52		     1		PUSH	EDX
 00000664  B6 0C	     1		MOV	DH, 12
 00000666  B2 1E	     1		MOV	DL, 30
 00000668  E8 00000000 E     1		CALL	Gotoxy
 0000066D  5A		     1		POP	EDX
					mWrite	"0) Calculadora"						
 00000364		     1		.data
 00000364 30 29 20 43 61     1			??0019 BYTE "0) Calculadora", 0
	   6C 63 75 6C 61
	   64 6F 72 61 00
 0000066E		     1		.code
 0000066E  52		     1			PUSH	EDX
 0000066F  BA 00000364 R     1			MOV	EDX, OFFSET ??0019
 00000674  E8 00000000 E     1			CALL	WriteString
 00000679  5A		     1			POP	EDX
					mGotoxy 30, 13 
 0000067A  52		     1		PUSH	EDX
 0000067B  B6 0D	     1		MOV	DH, 13
 0000067D  B2 1E	     1		MOV	DL, 30
 0000067F  E8 00000000 E     1		CALL	Gotoxy
 00000684  5A		     1		POP	EDX
					mWrite	"1) GCD"
 00000373		     1		.data
 00000373 31 29 20 47 43     1			??001A BYTE "1) GCD", 0
	   44 00
 00000685		     1		.code
 00000685  52		     1			PUSH	EDX
 00000686  BA 00000373 R     1			MOV	EDX, OFFSET ??001A
 0000068B  E8 00000000 E     1			CALL	WriteString
 00000690  5A		     1			POP	EDX
					mGotoxy 30, 14 
 00000691  52		     1		PUSH	EDX
 00000692  B6 0E	     1		MOV	DH, 14
 00000694  B2 1E	     1		MOV	DL, 30
 00000696  E8 00000000 E     1		CALL	Gotoxy
 0000069B  5A		     1		POP	EDX
					mWrite	"2) Figgonacci"
 0000037A		     1		.data
 0000037A 32 29 20 46 69     1			??001B BYTE "2) Figgonacci", 0
	   67 67 6F 6E 61
	   63 63 69 00
 0000069C		     1		.code
 0000069C  52		     1			PUSH	EDX
 0000069D  BA 0000037A R     1			MOV	EDX, OFFSET ??001B
 000006A2  E8 00000000 E     1			CALL	WriteString
 000006A7  5A		     1			POP	EDX
					mGotoxy 30, 15 
 000006A8  52		     1		PUSH	EDX
 000006A9  B6 0F	     1		MOV	DH, 15
 000006AB  B2 1E	     1		MOV	DL, 30
 000006AD  E8 00000000 E     1		CALL	Gotoxy
 000006B2  5A		     1		POP	EDX
 000006B3  B8 0000000F			mov eax,15
 000006B8  E8 00000000 E		call	SetTextColor
					mWrite	"Seleccion: "
 00000388		     1		.data
 00000388 53 65 6C 65 63     1			??001C BYTE "Seleccion: ", 0
	   63 69 6F 6E 3A
	   20 00
 000006BD		     1		.code
 000006BD  52		     1			PUSH	EDX
 000006BE  BA 00000388 R     1			MOV	EDX, OFFSET ??001C
 000006C3  E8 00000000 E     1			CALL	WriteString
 000006C8  5A		     1			POP	EDX

 000006C9  E8 00000000 E		CALL	ReadChar    
 000006CE  A2 00000000 R		MOV	choice, AL								; Imprime opcion elegida
 000006D3  E8 00000000 E		CALL	WriteChar
															; Como si fuese un interruptor (choice) 
 000006D8  80 3D 00000000 R		CMP	choice, '0'								; caso: '0'
	   30
 000006DF  75 07			JNE	X00									; SI no es igual a 0, busca otras opciones
 000006E1  E8 00000307			CALL	Calculadora
 000006E6  EB 20			JMP	X02									;Saltar a la lógica en la parte inferior

 000006E8			    X00:
 000006E8  80 3D 00000000 R		CMP	choice, '1'								; LO MISMO
	   31
 000006EF  75 07			JNE	X01
 000006F1  E8 00000311			CALL GCDF
 000006F6  EB 10			JMP	X02

 000006F8			    X01:
 000006F8  80 3D 00000000 R		CMP	choice, '2'								; LO MISMO
	   32
 000006FF  75 07			JNE	X02
 00000701  E8 FFFFFEEF			CALL FIGGONACCI
 00000706  EB 00			JMP	X02

 00000708			    X02:
					mGotoxy 0, 0 
 00000708  52		     1		PUSH	EDX
 00000709  B6 00	     1		MOV	DH, 0
 0000070B  B2 00	     1		MOV	DL, 0
 0000070D  E8 00000000 E     1		CALL	Gotoxy
 00000712  5A		     1		POP	EDX
 00000713  B4 00			mov ah,0
					
 00000715  E8 00000000 E		CALL	ClrScr
					INVOKE	Sleep, 200
 0000071A  68 000000C8	   *	    push   +0000000C8h
 0000071F  E8 00000000 E   *	    call   Sleep
 00000724  C3				RET
 00000725			DrawMainMenu ENDP

 00000725			printbotones PROC
					 

 00000725  B8 00000005			mov eax,5
 0000072A  E8 00000000 E		call	SetTextColor
					
						
					mGotoxy 5, 20
 0000072F  52		     1		PUSH	EDX
 00000730  B6 14	     1		MOV	DH, 20
 00000732  B2 05	     1		MOV	DL, 5
 00000734  E8 00000000 E     1		CALL	Gotoxy
 00000739  5A		     1		POP	EDX
					mWrite	" _____________________________________";
 00000394		     1		.data
 00000394 20 5F 5F 5F 5F     1			??001D BYTE " _____________________________________", 0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 00
 0000073A		     1		.code
 0000073A  52		     1			PUSH	EDX
 0000073B  BA 00000394 R     1			MOV	EDX, OFFSET ??001D
 00000740  E8 00000000 E     1			CALL	WriteString
 00000745  5A		     1			POP	EDX
					;mGotoxy 5,2 
					;mWrite	" _____________________________________"

					

 00000746  B1 14			MOV	CL,20
 00000748				X00:
					
 00000748  80 F9 01			CMP	CL, 1									; WHILE CL != 0
 0000074B  74 32			JE	X01									; SI lo hace, salga del ciclo WHILE
				        mGotoxy 5, CL									; Escribir caracter de pared izquierda  " | "
 0000074D  52		     1		PUSH	EDX
 0000074E  8A F1	     1		MOV	DH, CL
 00000750  B2 05	     1		MOV	DL, 5
 00000752  E8 00000000 E     1		CALL	Gotoxy
 00000757  5A		     1		POP	EDX
				        mWrite	wallVert								
 000003BB		     1		.data
 000003BB 7C 00		     1			??001E BYTE wallVert, 0
 00000758		     1		.code
 00000758  52		     1			PUSH	EDX
 00000759  BA 000003BB R     1			MOV	EDX, OFFSET ??001E
 0000075E  E8 00000000 E     1			CALL	WriteString
 00000763  5A		     1			POP	EDX
				        mGotoxy 42, CL
 00000764  52		     1		PUSH	EDX
 00000765  8A F1	     1		MOV	DH, CL
 00000767  B2 2A	     1		MOV	DL, 42
 00000769  E8 00000000 E     1		CALL	Gotoxy
 0000076E  5A		     1		POP	EDX
				        mWrite	wallVert								; Escribir caracter de pared derecha  " | "
 000003BD		     1		.data
 000003BD 7C 00		     1			??001F BYTE wallVert, 0
 0000076F		     1		.code
 0000076F  52		     1			PUSH	EDX
 00000770  BA 000003BD R     1			MOV	EDX, OFFSET ??001F
 00000775  E8 00000000 E     1			CALL	WriteString
 0000077A  5A		     1			POP	EDX
 0000077B  FE C9		        DEC	CL									; viajar hacia arriba en la pantalla hasta que todos estén colocados
 0000077D  EB C9			JMP	X00									; Saltar al principio del bucle WHILE
				  
 0000077F			    X01:
 0000077F  B8 000000B5				mov eax,181
 00000784  E8 00000000 E			call	SetTextColor
						mGotoxy 6,2 
 00000789  52		     1		PUSH	EDX
 0000078A  B6 02	     1		MOV	DH, 2
 0000078C  B2 06	     1		MOV	DL, 6
 0000078E  E8 00000000 E     1		CALL	Gotoxy
 00000793  5A		     1		POP	EDX
						mWrite	"                                    "
 000003BF		     1		.data
 000003BF 20 20 20 20 20     1			??0020 BYTE "                                    ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 00
 00000794		     1		.code
 00000794  52		     1			PUSH	EDX
 00000795  BA 000003BF R     1			MOV	EDX, OFFSET ??0020
 0000079A  E8 00000000 E     1			CALL	WriteString
 0000079F  5A		     1			POP	EDX
						

						mGotoxy 6,4									
 000007A0  52		     1		PUSH	EDX
 000007A1  B6 04	     1		MOV	DH, 4
 000007A3  B2 06	     1		MOV	DL, 6
 000007A5  E8 00000000 E     1		CALL	Gotoxy
 000007AA  5A		     1		POP	EDX
						mWrite	"____________________________________"
 000003E4		     1		.data
 000003E4 5F 5F 5F 5F 5F     1			??0021 BYTE "____________________________________", 0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 00
 000007AB		     1		.code
 000007AB  52		     1			PUSH	EDX
 000007AC  BA 000003E4 R     1			MOV	EDX, OFFSET ??0021
 000007B1  E8 00000000 E     1			CALL	WriteString
 000007B6  5A		     1			POP	EDX

 000007B7  B8 0000009E				mov eax,158
 000007BC  E8 00000000 E			call	SetTextColor
						mGotoxy 32, 6									
 000007C1  52		     1		PUSH	EDX
 000007C2  B6 06	     1		MOV	DH, 6
 000007C4  B2 20	     1		MOV	DL, 32
 000007C6  E8 00000000 E     1		CALL	Gotoxy
 000007CB  5A		     1		POP	EDX
						mWrite	"    +    "
 00000409		     1		.data
 00000409 20 20 20 20 2B     1			??0022 BYTE "    +    ", 0
	   20 20 20 20 00
 000007CC		     1		.code
 000007CC  52		     1			PUSH	EDX
 000007CD  BA 00000409 R     1			MOV	EDX, OFFSET ??0022
 000007D2  E8 00000000 E     1			CALL	WriteString
 000007D7  5A		     1			POP	EDX
						mGotoxy 32, 8									
 000007D8  52		     1		PUSH	EDX
 000007D9  B6 08	     1		MOV	DH, 8
 000007DB  B2 20	     1		MOV	DL, 32
 000007DD  E8 00000000 E     1		CALL	Gotoxy
 000007E2  5A		     1		POP	EDX
						mWrite	"    -    "
 00000413		     1		.data
 00000413 20 20 20 20 2D     1			??0023 BYTE "    -    ", 0
	   20 20 20 20 00
 000007E3		     1		.code
 000007E3  52		     1			PUSH	EDX
 000007E4  BA 00000413 R     1			MOV	EDX, OFFSET ??0023
 000007E9  E8 00000000 E     1			CALL	WriteString
 000007EE  5A		     1			POP	EDX
						mGotoxy 32, 10									
 000007EF  52		     1		PUSH	EDX
 000007F0  B6 0A	     1		MOV	DH, 10
 000007F2  B2 20	     1		MOV	DL, 32
 000007F4  E8 00000000 E     1		CALL	Gotoxy
 000007F9  5A		     1		POP	EDX
						mWrite	"    *    "
 0000041D		     1		.data
 0000041D 20 20 20 20 2A     1			??0024 BYTE "    *    ", 0
	   20 20 20 20 00
 000007FA		     1		.code
 000007FA  52		     1			PUSH	EDX
 000007FB  BA 0000041D R     1			MOV	EDX, OFFSET ??0024
 00000800  E8 00000000 E     1			CALL	WriteString
 00000805  5A		     1			POP	EDX
						mGotoxy 32, 12									
 00000806  52		     1		PUSH	EDX
 00000807  B6 0C	     1		MOV	DH, 12
 00000809  B2 20	     1		MOV	DL, 32
 0000080B  E8 00000000 E     1		CALL	Gotoxy
 00000810  5A		     1		POP	EDX
						mWrite	"    /    "											
 00000427		     1		.data
 00000427 20 20 20 20 2F     1			??0025 BYTE "    /    ", 0
	   20 20 20 20 00
 00000811		     1		.code
 00000811  52		     1			PUSH	EDX
 00000812  BA 00000427 R     1			MOV	EDX, OFFSET ??0025
 00000817  E8 00000000 E     1			CALL	WriteString
 0000081C  5A		     1			POP	EDX
						mGotoxy 32, 19
 0000081D  52		     1		PUSH	EDX
 0000081E  B6 13	     1		MOV	DH, 19
 00000820  B2 20	     1		MOV	DL, 32
 00000822  E8 00000000 E     1		CALL	Gotoxy
 00000827  5A		     1		POP	EDX
						mwrite "   =   "
 00000431		     1		.data
 00000431 20 20 20 3D 20     1			??0026 BYTE "   =   ", 0
	   20 20 00
 00000828		     1		.code
 00000828  52		     1			PUSH	EDX
 00000829  BA 00000431 R     1			MOV	EDX, OFFSET ??0026
 0000082E  E8 00000000 E     1			CALL	WriteString
 00000833  5A		     1			POP	EDX
														
						
						mGotoxy 7,  6		   							
 00000834  52		     1		PUSH	EDX
 00000835  B6 06	     1		MOV	DH, 6
 00000837  B2 07	     1		MOV	DL, 7
 00000839  E8 00000000 E     1		CALL	Gotoxy
 0000083E  5A		     1		POP	EDX
						mWrite	"  sen  "
 00000439		     1		.data
 00000439 20 20 73 65 6E     1			??0027 BYTE "  sen  ", 0
	   20 20 00
 0000083F		     1		.code
 0000083F  52		     1			PUSH	EDX
 00000840  BA 00000439 R     1			MOV	EDX, OFFSET ??0027
 00000845  E8 00000000 E     1			CALL	WriteString
 0000084A  5A		     1			POP	EDX
						mGotoxy 15, 6									
 0000084B  52		     1		PUSH	EDX
 0000084C  B6 06	     1		MOV	DH, 6
 0000084E  B2 0F	     1		MOV	DL, 15
 00000850  E8 00000000 E     1		CALL	Gotoxy
 00000855  5A		     1		POP	EDX
						mWrite	"  cos  "
 00000441		     1		.data
 00000441 20 20 63 6F 73     1			??0028 BYTE "  cos  ", 0
	   20 20 00
 00000856		     1		.code
 00000856  52		     1			PUSH	EDX
 00000857  BA 00000441 R     1			MOV	EDX, OFFSET ??0028
 0000085C  E8 00000000 E     1			CALL	WriteString
 00000861  5A		     1			POP	EDX
						mGotoxy 23, 6									
 00000862  52		     1		PUSH	EDX
 00000863  B6 06	     1		MOV	DH, 6
 00000865  B2 17	     1		MOV	DL, 23
 00000867  E8 00000000 E     1		CALL	Gotoxy
 0000086C  5A		     1		POP	EDX
						mWrite	"  tan  "
 00000449		     1		.data
 00000449 20 20 74 61 6E     1			??0029 BYTE "  tan  ", 0
	   20 20 00
 0000086D		     1		.code
 0000086D  52		     1			PUSH	EDX
 0000086E  BA 00000449 R     1			MOV	EDX, OFFSET ??0029
 00000873  E8 00000000 E     1			CALL	WriteString
 00000878  5A		     1			POP	EDX
						mGotoxy 7,  8									
 00000879  52		     1		PUSH	EDX
 0000087A  B6 08	     1		MOV	DH, 8
 0000087C  B2 07	     1		MOV	DL, 7
 0000087E  E8 00000000 E     1		CALL	Gotoxy
 00000883  5A		     1		POP	EDX
						mWrite	"  sec  "
 00000451		     1		.data
 00000451 20 20 73 65 63     1			??002A BYTE "  sec  ", 0
	   20 20 00
 00000884		     1		.code
 00000884  52		     1			PUSH	EDX
 00000885  BA 00000451 R     1			MOV	EDX, OFFSET ??002A
 0000088A  E8 00000000 E     1			CALL	WriteString
 0000088F  5A		     1			POP	EDX
						mGotoxy 15, 8									
 00000890  52		     1		PUSH	EDX
 00000891  B6 08	     1		MOV	DH, 8
 00000893  B2 0F	     1		MOV	DL, 15
 00000895  E8 00000000 E     1		CALL	Gotoxy
 0000089A  5A		     1		POP	EDX
						mWrite	"  cot  "
 00000459		     1		.data
 00000459 20 20 63 6F 74     1			??002B BYTE "  cot  ", 0
	   20 20 00
 0000089B		     1		.code
 0000089B  52		     1			PUSH	EDX
 0000089C  BA 00000459 R     1			MOV	EDX, OFFSET ??002B
 000008A1  E8 00000000 E     1			CALL	WriteString
 000008A6  5A		     1			POP	EDX
						mGotoxy 23, 8									
 000008A7  52		     1		PUSH	EDX
 000008A8  B6 08	     1		MOV	DH, 8
 000008AA  B2 17	     1		MOV	DL, 23
 000008AC  E8 00000000 E     1		CALL	Gotoxy
 000008B1  5A		     1		POP	EDX
						mWrite	"  csc  "
 00000461		     1		.data
 00000461 20 20 63 73 63     1			??002C BYTE "  csc  ", 0
	   20 20 00
 000008B2		     1		.code
 000008B2  52		     1			PUSH	EDX
 000008B3  BA 00000461 R     1			MOV	EDX, OFFSET ??002C
 000008B8  E8 00000000 E     1			CALL	WriteString
 000008BD  5A		     1			POP	EDX


						mGotoxy 7,  10									
 000008BE  52		     1		PUSH	EDX
 000008BF  B6 0A	     1		MOV	DH, 10
 000008C1  B2 07	     1		MOV	DL, 7
 000008C3  E8 00000000 E     1		CALL	Gotoxy
 000008C8  5A		     1		POP	EDX
						mWrite	"   1   "       
 00000469		     1		.data
 00000469 20 20 20 31 20     1			??002D BYTE "   1   ", 0
	   20 20 00
 000008C9		     1		.code
 000008C9  52		     1			PUSH	EDX
 000008CA  BA 00000469 R     1			MOV	EDX, OFFSET ??002D
 000008CF  E8 00000000 E     1			CALL	WriteString
 000008D4  5A		     1			POP	EDX
						mGotoxy 15, 10									
 000008D5  52		     1		PUSH	EDX
 000008D6  B6 0A	     1		MOV	DH, 10
 000008D8  B2 0F	     1		MOV	DL, 15
 000008DA  E8 00000000 E     1		CALL	Gotoxy
 000008DF  5A		     1		POP	EDX
						mWrite	"   2   "
 00000471		     1		.data
 00000471 20 20 20 32 20     1			??002E BYTE "   2   ", 0
	   20 20 00
 000008E0		     1		.code
 000008E0  52		     1			PUSH	EDX
 000008E1  BA 00000471 R     1			MOV	EDX, OFFSET ??002E
 000008E6  E8 00000000 E     1			CALL	WriteString
 000008EB  5A		     1			POP	EDX
						mGotoxy 23, 10									
 000008EC  52		     1		PUSH	EDX
 000008ED  B6 0A	     1		MOV	DH, 10
 000008EF  B2 17	     1		MOV	DL, 23
 000008F1  E8 00000000 E     1		CALL	Gotoxy
 000008F6  5A		     1		POP	EDX
						mWrite	"   3   "
 00000479		     1		.data
 00000479 20 20 20 33 20     1			??002F BYTE "   3   ", 0
	   20 20 00
 000008F7		     1		.code
 000008F7  52		     1			PUSH	EDX
 000008F8  BA 00000479 R     1			MOV	EDX, OFFSET ??002F
 000008FD  E8 00000000 E     1			CALL	WriteString
 00000902  5A		     1			POP	EDX
						mGotoxy 7,  12									
 00000903  52		     1		PUSH	EDX
 00000904  B6 0C	     1		MOV	DH, 12
 00000906  B2 07	     1		MOV	DL, 7
 00000908  E8 00000000 E     1		CALL	Gotoxy
 0000090D  5A		     1		POP	EDX
						mWrite	"   4   "
 00000481		     1		.data
 00000481 20 20 20 34 20     1			??0030 BYTE "   4   ", 0
	   20 20 00
 0000090E		     1		.code
 0000090E  52		     1			PUSH	EDX
 0000090F  BA 00000481 R     1			MOV	EDX, OFFSET ??0030
 00000914  E8 00000000 E     1			CALL	WriteString
 00000919  5A		     1			POP	EDX
						mGotoxy 15, 12									
 0000091A  52		     1		PUSH	EDX
 0000091B  B6 0C	     1		MOV	DH, 12
 0000091D  B2 0F	     1		MOV	DL, 15
 0000091F  E8 00000000 E     1		CALL	Gotoxy
 00000924  5A		     1		POP	EDX
						mWrite	"   5   "
 00000489		     1		.data
 00000489 20 20 20 35 20     1			??0031 BYTE "   5   ", 0
	   20 20 00
 00000925		     1		.code
 00000925  52		     1			PUSH	EDX
 00000926  BA 00000489 R     1			MOV	EDX, OFFSET ??0031
 0000092B  E8 00000000 E     1			CALL	WriteString
 00000930  5A		     1			POP	EDX
						mGotoxy 23, 12									
 00000931  52		     1		PUSH	EDX
 00000932  B6 0C	     1		MOV	DH, 12
 00000934  B2 17	     1		MOV	DL, 23
 00000936  E8 00000000 E     1		CALL	Gotoxy
 0000093B  5A		     1		POP	EDX
						mWrite	"   6   "
 00000491		     1		.data
 00000491 20 20 20 36 20     1			??0032 BYTE "   6   ", 0
	   20 20 00
 0000093C		     1		.code
 0000093C  52		     1			PUSH	EDX
 0000093D  BA 00000491 R     1			MOV	EDX, OFFSET ??0032
 00000942  E8 00000000 E     1			CALL	WriteString
 00000947  5A		     1			POP	EDX
						mGotoxy 7,  14									
 00000948  52		     1		PUSH	EDX
 00000949  B6 0E	     1		MOV	DH, 14
 0000094B  B2 07	     1		MOV	DL, 7
 0000094D  E8 00000000 E     1		CALL	Gotoxy
 00000952  5A		     1		POP	EDX
						mWrite	"   7   "
 00000499		     1		.data
 00000499 20 20 20 37 20     1			??0033 BYTE "   7   ", 0
	   20 20 00
 00000953		     1		.code
 00000953  52		     1			PUSH	EDX
 00000954  BA 00000499 R     1			MOV	EDX, OFFSET ??0033
 00000959  E8 00000000 E     1			CALL	WriteString
 0000095E  5A		     1			POP	EDX
						mGotoxy 15, 14									
 0000095F  52		     1		PUSH	EDX
 00000960  B6 0E	     1		MOV	DH, 14
 00000962  B2 0F	     1		MOV	DL, 15
 00000964  E8 00000000 E     1		CALL	Gotoxy
 00000969  5A		     1		POP	EDX
						mWrite	"   8   "
 000004A1		     1		.data
 000004A1 20 20 20 38 20     1			??0034 BYTE "   8   ", 0
	   20 20 00
 0000096A		     1		.code
 0000096A  52		     1			PUSH	EDX
 0000096B  BA 000004A1 R     1			MOV	EDX, OFFSET ??0034
 00000970  E8 00000000 E     1			CALL	WriteString
 00000975  5A		     1			POP	EDX
						mGotoxy 23, 14									
 00000976  52		     1		PUSH	EDX
 00000977  B6 0E	     1		MOV	DH, 14
 00000979  B2 17	     1		MOV	DL, 23
 0000097B  E8 00000000 E     1		CALL	Gotoxy
 00000980  5A		     1		POP	EDX
						mWrite	"   9   "
 000004A9		     1		.data
 000004A9 20 20 20 39 20     1			??0035 BYTE "   9   ", 0
	   20 20 00
 00000981		     1		.code
 00000981  52		     1			PUSH	EDX
 00000982  BA 000004A9 R     1			MOV	EDX, OFFSET ??0035
 00000987  E8 00000000 E     1			CALL	WriteString
 0000098C  5A		     1			POP	EDX
						mGotoxy 15, 16									
 0000098D  52		     1		PUSH	EDX
 0000098E  B6 10	     1		MOV	DH, 16
 00000990  B2 0F	     1		MOV	DL, 15
 00000992  E8 00000000 E     1		CALL	Gotoxy
 00000997  5A		     1		POP	EDX
						mWrite	"   0   "
 000004B1		     1		.data
 000004B1 20 20 20 30 20     1			??0036 BYTE "   0   ", 0
	   20 20 00
 00000998		     1		.code
 00000998  52		     1			PUSH	EDX
 00000999  BA 000004B1 R     1			MOV	EDX, OFFSET ??0036
 0000099E  E8 00000000 E     1			CALL	WriteString
 000009A3  5A		     1			POP	EDX
 000009A4  B8 00000030				mov eax,48
 000009A9  E8 00000000 E			call SetTextColor
						mgotoxy 6,0
 000009AE  52		     1		PUSH	EDX
 000009AF  B6 00	     1		MOV	DH, 0
 000009B1  B2 06	     1		MOV	DL, 6
 000009B3  E8 00000000 E     1		CALL	Gotoxy
 000009B8  5A		     1		POP	EDX
						mWritestring playerName
 000009B9  52		     1		PUSH	EDX
 000009BA  BA 00000001 R     1		MOV	EDX, OFFSET playerName
 000009BF  E8 00000000 E     1		CALL	WriteString
 000009C4  5A		     1		POP	EDX
						mGotoxy 0,28 
 000009C5  52		     1		PUSH	EDX
 000009C6  B6 1C	     1		MOV	DH, 28
 000009C8  B2 00	     1		MOV	DL, 0
 000009CA  E8 00000000 E     1		CALL	Gotoxy
 000009CF  5A		     1		POP	EDX
 000009D0  B8 0000000F				mov eax,15
 000009D5  E8 00000000 E			call	SetTextColor
						mwrite " "
 000004B9		     1		.data
 000004B9 20 00		     1			??0037 BYTE " ", 0
 000009DA		     1		.code
 000009DA  52		     1			PUSH	EDX
 000009DB  BA 000004B9 R     1			MOV	EDX, OFFSET ??0037
 000009E0  E8 00000000 E     1			CALL	WriteString
 000009E5  5A		     1			POP	EDX



 000009E6  C3				RET
					
 000009E7  E8 00000000 E		call readint
 000009EC  C3				RET

					

 000009ED			printbotones ENDP


 000009ED			Calculadora PROC
 000009ED				Y00:										
 000009ED  E8 00000000 E		CALL	ClrScr										
 000009F2  E8 FFFFFD2E			call	printbotones						;imprime botones
 000009F7  E8 FFFFFA46			CALL	PrintParedes
				   	
 000009FC			    X02:										;principal loop 
 000009FC  E8 FFFFF73A		        CALL	boton									; Que boton se oprimio?
 00000A01  E8 FFFFF600		        CALL	MovimientoLibre							; Que teclas se oprimio?

 00000A06  C3				RET

 00000A07			Calculadora ENDP

 00000A07			GCDF PROC

					MWRITE "Esta parte del codigo fue separado, de la interfaz para mayor comodidad"
 000004BB		     1		.data
 000004BB 45 73 74 61 20     1			??0038 BYTE "Esta parte del codigo fue separado, de la interfaz para mayor comodidad", 0
	   70 61 72 74 65
	   20 64 65 6C 20
	   63 6F 64 69 67
	   6F 20 66 75 65
	   20 73 65 70 61
	   72 61 64 6F 2C
	   20 64 65 20 6C
	   61 20 69 6E 74
	   65 72 66 61 7A
	   20 70 61 72 61
	   20 6D 61 79 6F
	   72 20 63 6F 6D
	   6F 64 69 64 61
	   64 00
 00000A07		     1		.code
 00000A07  52		     1			PUSH	EDX
 00000A08  BA 000004BB R     1			MOV	EDX, OFFSET ??0038
 00000A0D  E8 00000000 E     1			CALL	WriteString
 00000A12  5A		     1			POP	EDX
				   invoke sleep,400
 00000A13  68 00000190	   *	    push   +000000190h
 00000A18  E8 00000000 E   *	    call   Sleep
 00000A1D  C3			   ret

 00000A1E			GCDF ENDP







 00000A1E			StartSnoopycas PROC										; Maneja la lógica y el bucle del estado principal de la calculadora.
 00000A1E  E8 FFFFFA91			CALL	DrawTitleScreen								; Cargamos el titulo en pantalla
 00000A23			    X00:										; Inicio de calculadora
 00000A23  E8 FFFFFBCF			CALL	DrawMainMenu									
					

																															
					INVOKE	ExitProcess, 0
 00000A28  6A 00	   *	    push   +000000000h
 00000A2A  E8 00000000 E   *	    call   ExitProcess

 00000A2F  C3				RET
 00000A30			StartSnoopycas ENDP



				END main
Microsoft (R) Macro Assembler Version 14.33.31630.0	    11/25/22 13:32:32
SNOOPY CAS.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

AXIS . . . . . . . . . . . . . .	 00000002
  x  . . . . . . . . . . . . . .	 00000000	 Byte
  y  . . . . . . . . . . . . . .	 00000001	 Byte
CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000503 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000A30 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Calculadora  . . . . . . . . . .	P Near	 000009ED _TEXT	Length= 0000001A Public STDCALL
  Y00  . . . . . . . . . . . . .	L Near	 000009ED _TEXT	
  X02  . . . . . . . . . . . . .	L Near	 000009FC _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawMainMenu . . . . . . . . . .	P Near	 000005F7 _TEXT	Length= 0000012E Public STDCALL
  X00  . . . . . . . . . . . . .	L Near	 000006E8 _TEXT	
  X01  . . . . . . . . . . . . .	L Near	 000006F8 _TEXT	
  X02  . . . . . . . . . . . . .	L Near	 00000708 _TEXT	
DrawTitleScreen  . . . . . . . .	P Near	 000004B4 _TEXT	Length= 00000141 Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FIGGONACCI . . . . . . . . . . .	P Near	 000005F5 _TEXT	Length= 00000002 Public STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GCDF . . . . . . . . . . . . . .	P Near	 00000A07 _TEXT	Length= 00000017 Public STDCALL
GCD  . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MovimientoLibre  . . . . . . . .	P Near	 00000006 _TEXT	Length= 00000135 Public STDCALL
  looop  . . . . . . . . . . . .	L Near	 00000006 _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintParedes . . . . . . . . . .	P Near	 00000442 _TEXT	Length= 00000072 Public STDCALL
  X00  . . . . . . . . . . . . .	L Near	 0000047C _TEXT	
  X01  . . . . . . . . . . . . .	L Near	 000004B3 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StartSnoopycas . . . . . . . . .	P Near	 00000A1E _TEXT	Length= 00000012 Public STDCALL
  X00  . . . . . . . . . . . . .	L Near	 00000A23 _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
abs  . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
boton  . . . . . . . . . . . . .	P Near	 0000013B _TEXT	Length= 00000307 Public STDCALL
  X00  . . . . . . . . . . . . .	L Near	 00000140 _TEXT	
  segundo  . . . . . . . . . . .	L Near	 0000019A _TEXT	
  X01  . . . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  X02  . . . . . . . . . . . . .	L Near	 000001EC _TEXT	
  X03  . . . . . . . . . . . . .	L Near	 00000224 _TEXT	
  X04  . . . . . . . . . . . . .	L Near	 00000260 _TEXT	
  X05  . . . . . . . . . . . . .	L Near	 0000029C _TEXT	
  X06  . . . . . . . . . . . . .	L Near	 000002D8 _TEXT	
  X07  . . . . . . . . . . . . .	L Near	 00000314 _TEXT	
  X08  . . . . . . . . . . . . .	L Near	 0000034D _TEXT	
  X09  . . . . . . . . . . . . .	L Near	 00000386 _TEXT	
  X10  . . . . . . . . . . . . .	L Near	 000003BF _TEXT	
  X11  . . . . . . . . . . . . .	L Near	 00000405 _TEXT	
  X13  . . . . . . . . . . . . .	L Near	 00000441 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000006 Public STDCALL
printbotones . . . . . . . . . .	P Near	 00000725 _TEXT	Length= 000002C8 Public STDCALL
  X00  . . . . . . . . . . . . .	L Near	 00000748 _TEXT	
  X01  . . . . . . . . . . . . .	L Near	 0000077F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000050 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0000005F _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0000007C _DATA	
??0003 . . . . . . . . . . . . .	Byte	 0000009C _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000000BA _DATA	
??0005 . . . . . . . . . . . . .	Byte	 000000D9 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 000000DB _DATA	
??0007 . . . . . . . . . . . . .	Byte	 000000DD _DATA	
??0008 . . . . . . . . . . . . .	Byte	 0000012E _DATA	
??0009 . . . . . . . . . . . . .	Byte	 0000017F _DATA	
??000A . . . . . . . . . . . . .	Byte	 00000181 _DATA	
??000B . . . . . . . . . . . . .	Byte	 00000183 _DATA	
??000C . . . . . . . . . . . . .	Byte	 000001C9 _DATA	
??000D . . . . . . . . . . . . .	Byte	 0000020F _DATA	
??000E . . . . . . . . . . . . .	Byte	 00000255 _DATA	
??000F . . . . . . . . . . . . .	Byte	 0000029B _DATA	
??0010 . . . . . . . . . . . . .	Byte	 000002AD _DATA	
??0011 . . . . . . . . . . . . .	Byte	 000002BF _DATA	
??0012 . . . . . . . . . . . . .	Byte	 000002D1 _DATA	
??0013 . . . . . . . . . . . . .	Byte	 000002E3 _DATA	
??0014 . . . . . . . . . . . . .	Byte	 00000305 _DATA	
??0015 . . . . . . . . . . . . .	Byte	 00000313 _DATA	
??0016 . . . . . . . . . . . . .	Byte	 00000334 _DATA	
??0017 . . . . . . . . . . . . .	Byte	 00000342 _DATA	
??0018 . . . . . . . . . . . . .	Byte	 00000353 _DATA	
??0019 . . . . . . . . . . . . .	Byte	 00000364 _DATA	
??001A . . . . . . . . . . . . .	Byte	 00000373 _DATA	
??001B . . . . . . . . . . . . .	Byte	 0000037A _DATA	
??001C . . . . . . . . . . . . .	Byte	 00000388 _DATA	
??001D . . . . . . . . . . . . .	Byte	 00000394 _DATA	
??001E . . . . . . . . . . . . .	Byte	 000003BB _DATA	
??001F . . . . . . . . . . . . .	Byte	 000003BD _DATA	
??0020 . . . . . . . . . . . . .	Byte	 000003BF _DATA	
??0021 . . . . . . . . . . . . .	Byte	 000003E4 _DATA	
??0022 . . . . . . . . . . . . .	Byte	 00000409 _DATA	
??0023 . . . . . . . . . . . . .	Byte	 00000413 _DATA	
??0024 . . . . . . . . . . . . .	Byte	 0000041D _DATA	
??0025 . . . . . . . . . . . . .	Byte	 00000427 _DATA	
??0026 . . . . . . . . . . . . .	Byte	 00000431 _DATA	
??0027 . . . . . . . . . . . . .	Byte	 00000439 _DATA	
??0028 . . . . . . . . . . . . .	Byte	 00000441 _DATA	
??0029 . . . . . . . . . . . . .	Byte	 00000449 _DATA	
??002A . . . . . . . . . . . . .	Byte	 00000451 _DATA	
??002B . . . . . . . . . . . . .	Byte	 00000459 _DATA	
??002C . . . . . . . . . . . . .	Byte	 00000461 _DATA	
??002D . . . . . . . . . . . . .	Byte	 00000469 _DATA	
??002E . . . . . . . . . . . . .	Byte	 00000471 _DATA	
??002F . . . . . . . . . . . . .	Byte	 00000479 _DATA	
??0030 . . . . . . . . . . . . .	Byte	 00000481 _DATA	
??0031 . . . . . . . . . . . . .	Byte	 00000489 _DATA	
??0032 . . . . . . . . . . . . .	Byte	 00000491 _DATA	
??0033 . . . . . . . . . . . . .	Byte	 00000499 _DATA	
??0034 . . . . . . . . . . . . .	Byte	 000004A1 _DATA	
??0035 . . . . . . . . . . . . .	Byte	 000004A9 _DATA	
??0036 . . . . . . . . . . . . .	Byte	 000004B1 _DATA	
??0037 . . . . . . . . . . . . .	Byte	 000004B9 _DATA	
??0038 . . . . . . . . . . . . .	Byte	 000004BB _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BotonPoint0  . . . . . . . . . .	AXIS	 00000035 _DATA	
BotonPoint1  . . . . . . . . . .	AXIS	 00000023 _DATA	
BotonPoint2  . . . . . . . . . .	AXIS	 00000025 _DATA	
BotonPoint3  . . . . . . . . . .	AXIS	 00000027 _DATA	
BotonPoint4  . . . . . . . . . .	AXIS	 00000029 _DATA	
BotonPoint5  . . . . . . . . . .	AXIS	 0000002B _DATA	
BotonPoint6  . . . . . . . . . .	AXIS	 0000002D _DATA	
BotonPoint7  . . . . . . . . . .	AXIS	 0000002F _DATA	
BotonPoint8  . . . . . . . . . .	AXIS	 00000031 _DATA	
BotonPoint9  . . . . . . . . . .	AXIS	 00000033 _DATA	
BotonPointDiv  . . . . . . . . .	AXIS	 00000015 _DATA	
BotonPointEqual  . . . . . . . .	AXIS	 00000037 _DATA	
BotonPointMul  . . . . . . . . .	AXIS	 00000013 _DATA	
BotonPointRes  . . . . . . . . .	AXIS	 00000011 _DATA	
BotonPointSuma . . . . . . . . .	AXIS	 0000000F _DATA	
BotonPointcos  . . . . . . . . .	AXIS	 00000019 _DATA	
BotonPointcot  . . . . . . . . .	AXIS	 00000021 _DATA	
BotonPointcsc  . . . . . . . . .	AXIS	 0000001F _DATA	
BotonPointsec  . . . . . . . . .	AXIS	 0000001D _DATA	
BotonPointsen  . . . . . . . . .	AXIS	 00000017 _DATA	
BotonPointtan  . . . . . . . . .	AXIS	 0000001B _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DOS  . . . . . . . . . . . . . .	DWord	 00000040 _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UNO  . . . . . . . . . . . . . .	DWord	 0000003C _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACKSPACE . . . . . . . . . .	Number	 00000008h   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_Carriage  . . . . . . . . . .	Number	 0000000Dh   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
acumulador . . . . . . . . . . .	DWord	 00000044 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
choice . . . . . . . . . . . . .	Byte	 00000000 _DATA	
currentX . . . . . . . . . . . .	Byte	 00000039 _DATA	
currentY . . . . . . . . . . . .	Byte	 0000003A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxCol . . . . . . . . . . . . .	Number	 0000004Ch   
maxRow . . . . . . . . . . . . .	Number	 00000014h   
maxSize  . . . . . . . . . . . .	Number	 000000FFh   
maxX . . . . . . . . . . . . . .	Number	 0000004Fh   
maxY . . . . . . . . . . . . . .	Number	 00000017h   
playerName . . . . . . . . . . .	Byte	 00000001 _DATA	
primer_val . . . . . . . . . . .	DWord	 0000004C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
segundo_val  . . . . . . . . . .	DWord	 00000048 _DATA	
times  . . . . . . . . . . . . .	Byte	 0000003B _DATA	
wallHor  . . . . . . . . . . . .	Text   	 "--------------------------------------------------------------------------------"
wallVert . . . . . . . . . . . .	Number	 0000007Ch   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
